/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: E.cpp
 * time: Fri Feb 19 14:35:44 2021
 */

#include <bits/stdc++.h>
using namespace std;
const string CP_GEN_FILE = "E";

namespace cp {

}

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

void solve() {
    int n;
    cin >> n;
    vector<int> v(n);
    for (int& x: v) cin >> x;

    // O(n) Find all missing value smaller than n
    map<int, int> unused;
    for (int i = 0, val = 1; i < n; i++) {
        while (val < v[i]) {
            unused[val]++;
            val++;
        }
        if (val == v[i]) val++;
    }

    // O(n) No unused number so ans is the original array
    if ((int) unused.size() == 0) {
        for (int i = 0; i < 2; i++) {
            for (int& x: v) {
                cout << x << " ";
            }
            cout << endl;
        }
        return;
    }

    vector<int> p1(n), p2(n);
   
    // O(n) Get array of lexographical minimum
    p1[0] = v[0];
    auto it = unused.begin();
    for (int i = 1; i < n; i++) {
        if (v[i] != v[i - 1]) {
            p1[i] = v[i];
        } else {
            p1[i] = it->f;
            it++;
        }
    }

    // O(n^2) Get array of lexographical maximum
    p2[0] = v[0];
    for (int i = 1; i < n; i++) {
        if (v[i] != v[i - 1]) {
            p2[i] = v[i];
        } else {
            // find idx
            auto it = unused.lower_bound(p2[i - 1]);
            it--;
            p2[i] = (it)->f;
            unused.erase(p2[i]);
        }
    }

    for (int& x: p1) cout << x << " ";
    cout << endl;
    for (int& x: p2) cout << x << " ";
    cout << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;
    cin >> t;
    
    while (t--) {
        solve();
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
