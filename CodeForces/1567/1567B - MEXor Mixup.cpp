/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: B.cpp
 * time: Fri Feb 19 14:35:38 2021
 */

#include <bits/stdc++.h>
using namespace std;
const string CP_GEN_FILE = "B";

namespace cp {

}

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

int MOD = 1e9 + 7;

vector<int> v(3e5 + 1, 0);

void solve() {
    int MEX, XOR;
    cin >> MEX >> XOR;

    int add = 0;
	// case 1: when current != target and the inverse is not equal MEX
    if (v[MEX-1] != XOR && (v[MEX-1] ^ XOR) != MEX) {
        add = 1;
    } else if (v[MEX-1] != XOR && (v[MEX-1] ^ XOR) == MEX) { // when inverse is equal MEX
        add = 2;
    }

    cout << MEX + add << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;
    cin >> t;

	//  Precompute value for 0 XOR 1 XOR 2 ... i 
    int curr = 0;
    for (int i = 1; i < 3e5 + 1; i++) {
        curr ^= i;
        v[i] = curr;
    }

    while (t--) {
        solve();
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}

