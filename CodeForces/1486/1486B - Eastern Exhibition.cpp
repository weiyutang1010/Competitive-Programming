/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: B.cpp
 * time: Thu Feb 18 01:22:27 2021
 */

#include <bits/stdc++.h>
using namespace std;
const string CP_GEN_FILE = "B";

namespace cp {

}

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

void solve() {
    int n;
    cin >> n;
    vector<int> house_x(n);
    vector<int> house_y(n);
    for (int i = 0; i < n; i++) cin >> house_x[i] >> house_y[i];

    // Total number of houses is n
    int64_t lx = 0, ly = 0, rx = 0, ry = 0;

    // sort by x axis
    sort(house_x.begin(), house_x.end());
    // find point l such that l is min and
    // same amount of points <= l and > l

    // find point r such that r is max and
    // same amount of points <= r and > r
    
    // l and r will be the median
    if (n & 1) {
        rx = lx = house_x[n / 2];
    } else {
        lx = house_x[(n / 2) - 1];
        rx = house_x[n / 2];
    }

    // sort by y axis
    // Do the same for y axis as what you did above
    sort(house_y.begin(), house_y.end());
    if (n & 1) {
        ry = ly = house_y[n / 2];
    } else {
        ly = house_y[(n / 2) - 1];
        ry = house_y[n / 2];
    }

    // All the points in [l ... r] are valid for both x and y
    // Count how many points are valid
    cout << (ry - ly + 1) * (rx - lx + 1) << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;
    cin >> t;
    
    while (t--) {
        solve();
    }

    return 0;
}
