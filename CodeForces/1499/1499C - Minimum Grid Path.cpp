/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: C.cpp
 * time: Fri Feb 19 14:35:40 2021
 */

#include <bits/stdc++.h>
using namespace std;
const string CP_GEN_FILE = "C";

namespace cp {

}

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

void solve() {
    int n;
    cin >> n;
    vector<int64_t> cost(n);
    for (int64_t& x: cost) cin >> x;

    // Order of up and right does not matter for this problem
    // Even is for up and Odd is for right

    int64_t ans = INT64_MAX;
    int64_t total = cost[0];
    int64_t min_even = cost[0], min_odd = cost[1];
    int seen_even = 1, seen_odd = 0;

    // Calculate the min total cost if we use all steps at index i
    // the min total cost can be calculated by spending the most steps on min cost
    // and 1 step for the rest
    for (int i = 1; i < n; i++) {
        if (i & 1) {
            min_odd = min(min_odd, cost[i]);
            seen_odd++;
        } else {
            min_even = min(min_even, cost[i]);
            seen_even++;
        }
        total += cost[i];
        
        int64_t min_cost_total = total + (min_odd * (n - seen_odd)) + (min_even * (n - seen_even));

        ans = min(ans, min_cost_total);
    }

    cout << ans << endl;

}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;
    cin >> t;
    
    while (t--) {
        solve();
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
