/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: AdventOfCode.cpp
 */

#include <bits/stdc++.h>
using namespace std;

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

const int MOD = 1e9 + 7;
const vector<ii> dir {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};

string parse(string& st, string delimiter) {
    int pos = st.find(delimiter);
    string temp = st.substr(0, pos);
    st = st.substr(pos + delimiter.size());
    return temp;
}

void part1(vector<int>& v) {
    cout << "Part 1: " << endl;

    int n = v.size();
    map<int, int64_t> mp;

    for (int i = 0; i < n; i++) {
        mp[v[i]]++;
    }

    for (int i = 0; i < 80; i++) {
        int day0_fishes = mp[0];
        for (int i = 0; i < 8; i++) {
            mp[i] = mp[i+1];
        }
        mp[6] += day0_fishes;
        mp[8] = day0_fishes;
    }

    int64_t ans = 0;
    for (auto& fish_cnt: mp) {
        ans += fish_cnt.s;
    }
    cout << ans << endl;
}

void part2(vector<int>& v) {
    cout << "Part 2: " << endl;


    int n = v.size();
    map<int, int64_t> mp;

    for (int i = 0; i < n; i++) {
        mp[v[i]]++;
    }

    // Same as part 1, use 64 bits integer
    int64_t ans = v.size();
    for (int i = 0; i < 256; i++) {
        int64_t day0_fishes = mp[0];
        for (int i = 0; i < 8; i++) {
            mp[i] = mp[i+1];
        }
        mp[6] += day0_fishes;
        mp[8] = day0_fishes;
        ans += day0_fishes;
    }

    cout << ans << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;

    // Read input
    string st;
    getline(cin, st);
    vector<int> v;
    while (st.size() > 1) {
        v.push_back(stoi(parse(st, ",")));
    }
    v.push_back(stoi(st));
    
    // Start Solving
    while (t--) {
        part1(v);
        cout << endl;
        part2(v);
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
