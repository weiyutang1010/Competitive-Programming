/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: AdventOfCode.cpp
 */

#include <bits/stdc++.h>
using namespace std;

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

const int MOD = 1e9 + 7;
const vector<ii> dir {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};

unordered_map<char, char> mp = {{')','('},{']','['},{'}','{'},{'>','<'}};
unordered_map<char, int> score = {{')',3},{']',57},{'}',1197},{'>',25137}};

unordered_map<char, int> score2 = {{'(',1},{'[',2},{'{',3},{'<',4}};

string parse(string& st, string delimiter) {
    int pos = st.find(delimiter);
    if (pos == -1) {
        string temp = st;
        st = "";
        return temp;
    } else {
        string temp = st.substr(0, pos);
        st = st.substr(pos + delimiter.size());
        return temp;
    }
}

void part1(vector<string>& lines) {
    cout << "Part 1: " << endl;
    int64_t ans = 0;

    for (string& line: lines) {
        int n = line.size();
        stack<char> st;

        for (int i = 0; i < n; i++) {
            if (line[i] == ')'|| line[i] == ']' || line[i] == '}' || line[i] == '>') {
                if (st.empty()) break;
                if (!st.empty() && st.top() != mp[line[i]]) {
                    ans += score[line[i]];
                    break;
                }

                st.pop();
            } else {
                st.push(line[i]);
            }
        }
    }

    cout << ans << endl;
}

void part2(vector<string>& lines) {
    cout << "Part 2: " << endl;

    vector<int64_t> ans;
    for (string& line: lines) {
        int n = line.size();
        stack<char> st;
        bool incomplete = true;

        for (int i = 0; i < n; i++) {
            if (line[i] == ')'|| line[i] == ']' || line[i] == '}' || line[i] == '>') {
                if (st.empty()) continue;
                if (!st.empty() && st.top() != mp[line[i]]) {
                    incomplete = false;
                    break;
                }

                st.pop();
            } else {
                st.push(line[i]);
            }
        }

        if (incomplete) {
            int64_t total = 0;
            while (incomplete && !st.empty()) {
                total *= 5;
                total += score2[st.top()];
                st.pop();
            }

            ans.push_back(total);
        }
    }
   
    sort(ans.begin(), ans.end());
    cout << ans[ans.size() / 2] << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;

    // Read input
    string st;
    vector<string> lines;
    while (getline(cin, st)) {
        lines.push_back(st);
    }

    // Start Solving
    while (t--) {
        part1(lines);
        cout << endl;
        part2(lines);
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
