/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: AdventOfCode.cpp
 */

#include <bits/stdc++.h>
using namespace std;

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

const int MOD = 1e9 + 7;
const vector<ii> dir {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};

string parse(string& st, string delimiter) {
    int pos = st.find(delimiter);
    if (pos == -1) {
        string temp = st;
        st = "";
        return temp;
    } else {
        string temp = st.substr(0, pos);
        st = st.substr(pos + delimiter.size());
        return temp;
    }
}

void part1(vector<int>& v) {
    cout << "Part 1: " << endl;

    int n = v.size();
    sort(v.begin(), v.end());
   
    // Find the cost to median
    int ans = 0;
    for (int& x: v) {
        ans += abs(x - v[n/2]);
    }
    cout << ans << endl;
}

void part2(vector<int>& v) {
    cout << "Part 2: " << endl;

    // Since max element is around 1000, brute force for solution
    int n = v.size();
    int max_n = *max_element(v.begin(), v.end());
    int64_t ans = INT64_MAX;
    for (int i = 0; i <= max_n; i++) {
        int64_t cost = 0;
        for (int j = 0; j < n; j++) {
            int64_t dist = abs(v[j] - i);
            cost += (dist * (dist + 1)) / 2;
        }
        ans = min(ans, cost);
    }

    cout << ans << endl;
    
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;

    // Read input
    string st;
    getline(cin, st);
    vector<int> v;
    while (st.size() > 0) {
        v.push_back(stoi(parse(st, ",")));
    }

    // Start Solving
    while (t--) {
        part1(v);
        cout << endl;
        part2(v);
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
