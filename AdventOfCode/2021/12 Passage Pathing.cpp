/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: AdventOfCode.cpp
 */

#include <bits/stdc++.h>
using namespace std;

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

const int MOD = 1e9 + 7;
const vector<ii> dir {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
const vector<ii> dir8 {{0, 1}, {1, 0}, {-1, 0}, {0, -1}, {1, 1}, {-1, -1}, {1, -1}, {-1, 1}};

string parse(string& st, string delimiter) {
    int pos = st.find(delimiter);
    if (pos == -1) {
        string temp = st;
        st = "";
        return temp;
    } else {
        string temp = st.substr(0, pos);
        st = st.substr(pos + delimiter.size());
        return temp;
    }
}

bool issmall(string st) {
    return (st[0] >= 'a' && st[0] <= 'z');
}

void dfs(unordered_map<string, vector<string>>& graph, unordered_map<string, bool>& visited, string curr, bool small, int& ans) {
    for (string& st: graph[curr]) {
        if (st == "end") {
            ans++;
            continue;
        }

        if (issmall(st) && !visited[st]) {
            // if next room is small and not visited
            visited[st] = true;
            dfs(graph, visited, st, true, ans);
            visited[st] = false;
        } else if (!issmall(st)) {
            // if next room is not small
            dfs(graph, visited, st, small, ans);
        }
    }
}


void part1(unordered_map<string, vector<string>>& graph) {
    cout << "Part 1: " << endl;

    int ans = 0;
    unordered_map<string, bool> visited;
    visited["start"] = 1;
    dfs(graph, visited, "start", false, ans);

    cout << ans << endl;
}

void dfs2(unordered_map<string, vector<string>>& graph, unordered_map<string, bool>& visited, string curr, bool small, int& ans) {
    for (string& st: graph[curr]) {
        if (st == "end") {
            ans++;
            continue;
        }

        if (issmall(st) && !visited[st]) {
            // if next room is small and not visited
            visited[st] = true;
            dfs2(graph, visited, st, small, ans);
            visited[st] = false;
        } else if (!issmall(st)) {
            // if next room is not small
            dfs2(graph, visited, st, small, ans);
        } else {
            if (!small && st != "start") {
                // if next room is small but we can visit it second time
                dfs2(graph, visited, st, true, ans);
            }
        }
    }
}

void part2(unordered_map<string, vector<string>>& graph) {
    cout << "Part 2: " << endl;

    int ans = 0;
    unordered_map<string, bool> visited;
    visited["start"] = 1;
    dfs2(graph, visited, "start", false, ans);

    cout << ans << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;

    // Read input
    string st;
    vector<string> v;
    while (getline(cin, st)) {
        v.push_back(st);
    }

    // Create adjacent list from the input
    unordered_map<string, vector<string>> graph;
    for (string& st: v) {
        string r1 = parse(st, "-");
        string r2 = parse(st, " ");

        graph[r1].push_back(r2);
        graph[r2].push_back(r1);
    }

    // Start Solving
    while (t--) {
        part1(graph);
        cout << endl;
        part2(graph);
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
