/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: AdventOfCode.cpp
 */

#include <bits/stdc++.h>
using namespace std;

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

const int MOD = 1e9 + 7;
const vector<ii> dir {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};

int count_score(vector<vector<int>>& board) {
    int ans = 0;
    for (vector<int>& row: board) {
        for (int& x: row) {
            if (x > 1) ans++;
        }
    }
    return ans;
}

void part1(vector<vector<ii>>& lines) {
    cout << "Part 1: " << endl;

    vector<vector<int>> board(1000, vector<int> (1000));
    for (vector<ii>& line: lines) {
        ii start_pt = line[0];
        ii end_pt = line[1];

        if (start_pt.f == end_pt.f) {
            // Horizontal line
            int start = min(start_pt.s, end_pt.s);
            int end = max(start_pt.s, end_pt.s);
            for (int i = start; i <= end; i++) {
                board[start_pt.f][i] += 1;
            }
        } else if (start_pt.s == end_pt.s) {
            // Vertical line
            int start = min(start_pt.f, end_pt.f);
            int end = max(start_pt.f, end_pt.f);
            for (int i = start; i <= end; i++) {
                board[i][start_pt.s] += 1;
            }
        }
    }

    cout << count_score(board) << endl;
}

void part2(vector<vector<ii>>& lines) {
    cout << "Part 2: " << endl;

    vector<vector<int>> board(1000, vector<int> (1000));
    for (vector<ii>& line: lines) {
        ii start_pt = line[0];
        ii end_pt = line[1];

        if (start_pt.f == end_pt.f) {
            // Horizontal
            int start = min(start_pt.s, end_pt.s);
            int end = max(start_pt.s, end_pt.s);
            for (int i = start; i <= end; i++) {
                board[start_pt.f][i] += 1;
            }
        } else if (start_pt.s == end_pt.s) {
            // Vertical
            int start = min(start_pt.f, end_pt.f);
            int end = max(start_pt.f, end_pt.f);
            for (int i = start; i <= end; i++) {
                board[i][start_pt.s] += 1;
            }
        } else {
            // Diagonal
            if (start_pt.f > end_pt.f) {
                ii temp = start_pt;
                start_pt = end_pt;
                end_pt = temp;
            }

            int start = start_pt.f;
            int end = end_pt.f;
            int col = start_pt.s;
            int sign;
            if (start_pt.s < end_pt.s) {
                sign = 1;
            } else {
                sign = -1;
            }

            for (int i = start; i <= end; i++) {
                board[i][col] += 1;
                col += sign;
            }
        }
    }

    cout << count_score(board) << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;

    // Read input
    string st;
    vector<vector<ii>> lines;
    while (getline(cin, st)) {
        vector<ii> line (2);
        ii pt = {0, 0};
        
        int pos = st.find(',');
        pt.f = stoi(st.substr(0,pos));
        
        st = st.substr(pos);
        pos = st.find(" -> ");
        pt.s = stoi(st.substr(1, pos));
    
        line[0] = pt;

        ii pt2 = {0, 0};
        st = st.substr(pos + 4);
        pos = st.find(',');
        pt2.f = stoi(st.substr(0, pos));

        pt2.s = stoi(st.substr(pos+1));
        line[1] = pt2;

        lines.push_back(line);
    }

    // Start Solving
    while (t--) {
        part1(lines);
        cout << endl;
        part2(lines);
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
