/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: AdventOfCode.cpp
 */

#include <bits/stdc++.h>
using namespace std;

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

const int MOD = 1e9 + 7;
const vector<ii> dir {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};

string parse(string& st, string delimiter) {
    int pos = st.find(delimiter);
    if (pos == -1) {
        string temp = st;
        st = "";
        return temp;
    } else {
        string temp = st.substr(0, pos);
        st = st.substr(pos + delimiter.size());
        return temp;
    }
}

void part1(vector<vector<string>>& output) {
    cout << "Part 1: " << endl;

    int ans = 0;
    for (vector<string>& v: output) {
        for (string& st: v) {
            int n = st.size();
            if (n == 2 || n == 4 || n == 3 || n == 7) ans++;
        }
    }

    cout << ans << endl;
}

// Check if s1 contains all characters in s2
bool contain(string s1, string s2) {
    int ans = 0;
    for (char& c: s1) {
        for (char& c2: s2) {
            if (c == c2) ans++;
        }
    }
    return ans == (int)s2.size();
}

// [n] denote the digit n
void part2(vector<vector<string>>& input, vector<vector<string>>& output) {
    cout << "Part 2: " << endl;

    int n = input.size();
    int ans = 0;

    for (int i = 0; i < n; i++) {
        vector<string> v(10);

        for (string& st: input[i]) {
            // Match digits that have unique number segment
            int m = st.size();
            if (m == 2) {
                v[1] = st;
            } else if (m == 4) {
                v[4] = st;
            } else if (m == 3) {
                v[7] = st;
            } else if (m == 7) {
                v[8] = st;
            }
        }

        for (string& st: input[i]) {
            // Match remaining numbers
            int m = st.size();
            if (m == 6) {
                if (contain(st, v[1])) {
                    if (contain(st, v[4])) {
                        v[9] = st;
                    } else {
                        v[0] = st;
                    }
                } else {
                    v[6] = st;
                }
            } else if (m == 5) {
                if (contain(st, v[1])) {
                    v[3] = st;
                } else {
                    int match = 0;
                    // [5] has 3 matching character with [4]
                    // but [2] has only 2 matching character with [4]
                    for (char& c: st) {
                        for (char& c2: v[4]) {
                            if (c == c2) match++;
                        }
                    }

                    if (match == 2) {
                        v[2] = st;
                    } else {
                        v[5] = st;
                    }
                }
            }
        }

        // Add up value of output
        int val = 0; int j = 1000;
        for (string& st: output[i]) {
            for (int i = 0; i < 10; i++) {
                // Find two string with same unique characters
                unordered_map<char, int> mp;
                for (char& c: st) mp[c]++;

                int match = 0;
                bool found = true;
                for (char& c: v[i]) {
                    mp[c]--;
                    if (mp[c] < 0) {
                        found = false;
                        break;
                    }
                    match++;
                }

                if (found && match == (int)st.size()) {
                    val += i * j;
                    j /= 10;
                    break;
                }
            }
        }
        ans += val;
    }

    cout << ans << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;

    // Read input
    string st;
    vector<vector<string>> input;
    vector<vector<string>> output;
    
    while (getline(cin, st)) {
        vector<string> v;
        for (int i = 0; i < 10; i++) {
            v.push_back(parse(st, " "));
        }

        input.push_back(v);
        parse(st, "| ");
        v.clear();

        for (int i = 0; i < 4; i++) {
            v.push_back(parse(st, " "));
        }
        output.push_back(v);
    }


    // Start Solving
    while (t--) {
        part1(output);
        cout << endl;
        part2(input, output);
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
