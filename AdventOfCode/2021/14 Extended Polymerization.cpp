/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: AdventOfCode.cpp
 */

#include <bits/stdc++.h>
using namespace std;

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

const int MOD = 1e9 + 7;
const vector<ii> dir {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
const vector<ii> dir8 {{0, 1}, {1, 0}, {-1, 0}, {0, -1}, {1, 1}, {-1, -1}, {1, -1}, {-1, 1}};

string parse(string& st, string delimiter) {
    int pos = st.find(delimiter);
    if (pos == -1) {
        string temp = st;
        st = "";
        return temp;
    } else {
        string temp = st.substr(0, pos);
        st = st.substr(pos + delimiter.size());
        return temp;
    }
}

void part1(string& st, unordered_map<string, char>& mp) {
    cout << "Part 1: " << endl;

    vector<int> cnt(26, 0);
    for (char& c: st) cnt[c - 'A']++;

    string temp = st;
    for (int k = 0; k < 10; k++) {
        string new_st = "";
        int n = temp.size();
        
        // Sliding window
        // if combination exists, then insert the middle character
        for (int i = 1; i < n; i++) {
            string word = "";
            word += temp[i-1];
            word += temp[i];

            if (mp[word] != 0) {
                char mid_char = mp[word];
                new_st += temp[i-1];
                new_st += mid_char;
                cnt[mid_char - 'A']++;
            } else {
                new_st += temp[i-1];
            }
        }
        new_st += temp[n-1];
        temp = new_st;
    }

    // Find least common char that appears at least once
    int min_n = INT_MAX;
    for (int& x: cnt) {
        if (x > 0) min_n = min(min_n, x);
    }

    cout << *max_element(cnt.begin(), cnt.end()) - min_n << endl; 
}

void part2(string& st, unordered_map<string, char>& mp) {
    cout << "Part 2: " << endl;
    
    vector<int64_t> cnt(26, 0);
    for (char& c: st) cnt[c - 'A']++;

    int n = st.size();

    // Keep track of number of character pairs
    unordered_map<string, int64_t> pair_cnt;
    for (int i = 1; i < n; i++) {
        string pairs = {st[i-1], st[i]};
        pair_cnt[pairs]++;
    }

    for (int k = 0; k < 40; k++) {
        unordered_map<string, int64_t> temp (pair_cnt);
        for (auto [pairs, freq]: temp) {
            char mid = mp[pairs];
            if (mid != 0 && freq > 0) {
                pair_cnt[pairs] -= freq;
                
                string p1 = {pairs[0], mid};
                pair_cnt[p1] += freq;
                string p2 = {mid, pairs[1]};
                pair_cnt[p2] += freq;
                
                cnt[mid - 'A'] += freq;
            }
        }
    }

    // Find least common char that appears at least once
    int64_t max_n = 0;
    int64_t min_n = INT64_MAX;
    for (int64_t& x: cnt) {
        if (x > 0) min_n = min(min_n, x);
        max_n = max(max_n, x);
    }

    cout << max_n - min_n << endl; 

}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;

    // Read input
    string st;
    getline(cin, st);

    string temp;
    getline(cin, temp);
    unordered_map<string, char> mp;
    while (getline(cin, temp)) {
        string word = parse(temp, " -> ");
        char mid = parse(temp, " ")[0];

        mp[word] = mid;
    }

    // Start Solving
    while (t--) {
        part1(st, mp);
        cout << endl;
        part2(st, mp);
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
