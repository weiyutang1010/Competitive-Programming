/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: AdventOfCode.cpp
 */

#include <bits/stdc++.h>
using namespace std;

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

const int MOD = 1e9 + 7;
const vector<ii> dir {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};

void part2(vector<string> v) {
    cout << "Part 2: " << endl;

    int num_line = v.size();
    vector<int> o_idx;
    vector<int> co_idx;

    // Push all indices for o2 and co2
    for (int i = 0; i < num_line; i++) {
        o_idx.push_back(i);
        co_idx.push_back(i);
    }

    string ox, co2;
    for (int i = 0; i < 12; i++) {
        vector<int> new_v, new_v2;

        // Find most common bit from o2 list
        int most_common_bit = 0;
        for (int& idx: o_idx) {
            most_common_bit += v[idx][i] - '0';
        }

        if (most_common_bit >= (int)o_idx.size() - most_common_bit) most_common_bit = '1';
        else most_common_bit = '0';

        // Find least common bit from co2 list
        int least_common_bit = 0;
        for (int& idx: co_idx) {
            least_common_bit += v[idx][i] - '0';
        }

        if (least_common_bit >= (int)co_idx.size() - least_common_bit) least_common_bit = '0';
        else least_common_bit = '1';

        // Save indices that matches the criteria
        for (int& idx: o_idx) {
            if (v[idx][i] == most_common_bit) {
                new_v.push_back(idx);
            }
        }

        for (int& idx: co_idx) {
            if (v[idx][i] == least_common_bit) {
                new_v2.push_back(idx);
            }
        }

        // When one string left, save the string
        if (new_v.size() == 1) {
            ox = v[new_v[0]];
        }
        if (new_v2.size() == 1) {
            co2 = v[new_v2[0]];
        }

        o_idx = new_v;
        co_idx = new_v2;
    }

    cout << "oxygen: " << ox << endl;
    cout << "co2: " << co2 << endl;
    cout << stoi(ox, 0, 2) * stoi (co2, 0, 2) << endl;
}

void part1(vector<string> v) {
    cout << "Part 1: " << endl;
    
    int num_line = v.size();
    vector bit(12, 0);

    // Find number of 1 bit for each pos
    for (string& st: v) {
        int n = st.size();

        for (int i = 0; i < n; i++) {
            bit[i] += st[i] - '0';
        }
    }

    // Find most and least common bit for each pos
    string gamma_rate = "";
    string eps_rate = "";
    for (int& x: bit) {
        if (x >= num_line - x) {
            gamma_rate += '1';
            eps_rate += '0';
        } else {
            gamma_rate += '0';
            eps_rate += '1';
        }
    }

    // Display answer
    cout << "gamma: " << gamma_rate << endl;
    cout << "eps: " << eps_rate << endl;
    cout << stoi(gamma_rate, 0, 2) * stoi(eps_rate, 0, 2) << endl;

}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;
    //cin >> t;
    
    string st;
    vector<string> v;
    while (getline(cin, st)) {
        v.push_back(st);
    }

    while (t--) {
        part1(v);
        cout << endl;
        part2(v);
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
