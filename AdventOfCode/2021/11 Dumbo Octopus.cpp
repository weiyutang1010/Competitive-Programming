/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: AdventOfCode.cpp
 */

#include <bits/stdc++.h>
using namespace std;

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

const int MOD = 1e9 + 7;
const vector<ii> dir {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
const vector<ii> dir8 {{0, 1}, {1, 0}, {-1, 0}, {0, -1}, {1, 1}, {-1, -1}, {1, -1}, {-1, 1}};

string parse(string& st, string delimiter) {
    int pos = st.find(delimiter);
    if (pos == -1) {
        string temp = st;
        st = "";
        return temp;
    } else {
        string temp = st.substr(0, pos);
        st = st.substr(pos + delimiter.size());
        return temp;
    }
}

void part1(vector<string> board) {
    cout << "Part 1: " << endl;

    int n = board.size();

    int ans = 0;
    for (int k = 0; k < 100; k++) {
        // step 1
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] += 1;
            }
        }

        vector<vector<int>> visited (10, vector<int> (10));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j] && board[i][j] > '9') {
                    // step 2
                    queue<ii> bfs;
                    bfs.push({i, j});

                    while (!bfs.empty()) {
                        auto [x, y] = bfs.front();
                        bfs.pop();
                        if (visited[x][y]) continue;
                        visited[x][y] = 1;
                        ans += 1;

                        for (auto& [dx, dy]: dir8) {
                            if (x + dx < n && x + dx >= 0 && y + dy < n && y + dy >= 0 && !visited[x+dx][y+dy]) {
                                board[x+dx][y+dy] += 1;
                                if (board[x+dx][y+dy] > '9') {
                                    bfs.push({x+dx, y+dy});
                                }
                            }
                        }

                        // step 3
                        board[x][y] = '0';
                    }
                }
            }
        }
    }

    cout << ans << endl;
}

void part2(vector<string> board) {
    cout << "Part 2: " << endl;

    int n = board.size();

    for (int k = 0; k < 10000; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] += 1;
            }
        }

        vector<vector<int>> visited (n, vector<int> (n));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j] && board[i][j] > '9') {
                    queue<ii> bfs;
                    bfs.push({i, j});

                    while (!bfs.empty()) {
                        auto [x, y] = bfs.front();
                        bfs.pop();
                        if (visited[x][y]) continue;
                        visited[x][y] = 1;

                        for (auto& [dx, dy]: dir8) {
                            if (x + dx < n && x + dx >= 0 && y + dy < n && y + dy >= 0 && !visited[x+dx][y+dy]) {
                                board[x+dx][y+dy] += 1;
                                if (board[x+dx][y+dy] > '9') {
                                    bfs.push({x+dx, y+dy});
                                }
                            }
                        }

                        board[x][y] = '0';
                    }
                }
            }
        }

        // Same idea as part 1
        // If every number on board turns 0, go next
        bool flashed = true;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j]) {
                    flashed = false;
                    break;
                }
            }

            if (!flashed) break;
        }

        if (flashed) {
            cout << k + 1 << endl;
            break;
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;

    // Read input
    string st;
    vector<string> board;
    while (getline(cin, st)) {
        board.push_back(st);
    }

    // Start Solving
    while (t--) {
        part1(board);
        cout << endl;
        part2(board);
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
