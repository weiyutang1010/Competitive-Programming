/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: AdventOfCode.cpp
 */

#include <bits/stdc++.h>
using namespace std;

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

const int MOD = 1e9 + 7;
const vector<ii> dir {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};

bool check_winner(vector<vector<int>>& board) {
    // Vertical
    for (int j = 0; j < 5; j++) {
        bool marked = true;
        for (int i = 0; i < 5; i++) {
            if (board[i][j] >= 0) {
                marked = false;
                break;
            }
        }
        if (marked) return true;
    }
    
    // Horizontal
    for (int i = 0; i < 5; i++) {
        bool marked = true;
        for (int j = 0; j < 5; j++) {
            if (board[i][j] >= 0) {
                marked = false;
                break;
            }
        }
        if (marked) return true;
    }

    return false;
}

int64_t calculate_score(int num, vector<vector<int>>& board) {
    // Sum up all unmarked score
    int64_t sum = 0;
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (board[i][j] >= 0) {
                sum += board[i][j];
            }
        }
    }

    return sum * num;
}

void part2(vector<int>& nums, vector<vector<vector<int>>>& boards) {
    cout << "Part 2: " << endl;

    int n = nums.size();
    vector<ii> winner;
    unordered_map<int, int> mp;

    for (int i = 0; i < n; i++) {
        int num = nums[i];
        int board_size = boards.size();

        for (int k = 0; k < board_size; k++) {
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < 5; j++) {
                    // Mark board by setting the number to negative
                    if (!mp[k] && boards[k][i][j] == num && boards[k][i][j] >= 0) {
                        boards[k][i][j] += 1;
                        boards[k][i][j] *= -1;
                    }
                }
            }

            bool found_winner = check_winner(boards[k]);
            if (found_winner && !mp[k]) {
                // Store all winners
                mp[k] = 1;
                winner.push_back({k, num});
            }
        }
    }

    int winner_size = winner.size();
    cout << winner[winner_size-1].f << " " << winner[winner_size-1].s << endl;
    cout << "Score: " << calculate_score(winner[winner_size - 1].s, boards[winner[winner_size - 1].f]);
    cout << endl;
}

void part1(vector<int>& nums, vector<vector<vector<int>>>& boards) {
    cout << "Part 1: " << endl;
    
    int n = nums.size();
    for (int i = 0; i < n; i++) {
        int num = nums[i];

        for (auto& board: boards) {
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < 5; j++) {
                    // Mark board by setting the number to negative
                    if (board[i][j] == num && board[i][j] >= 0) {
                        board[i][j] += 1;
                        board[i][j] *= -1;
                    }
                }
            }

            bool found_winner = check_winner(board);
            if (found_winner) {
                cout << "Found Winner!" << endl;
                cout << "Score: " << calculate_score(num, board) << endl;
                return;
            }
        }
    }
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;
   
    string line;
    cin >> line;
  
    // Getting input in c++ :)
    string token;
    stringstream ss(line);
    vector<int> nums;
    while (getline(ss, token, ',')) {
        nums.push_back(stoi(token));
    }

    string st;
    vector<vector<vector<int>>> boards;
    int board_count = 0;
    while (getline(cin, st)) {
        boards.push_back(vector<vector<int>> (5, vector<int> (5)));
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                cin >> boards[board_count][i][j];
            }
        }
        board_count++;
    }
    boards.pop_back();

    // Start Solving
    while (t--) {
        part1(nums, boards);
        cout << endl;
        part2(nums, boards);
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
