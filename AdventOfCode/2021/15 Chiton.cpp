/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: AdventOfCode.cpp
 */

#include <bits/stdc++.h>
using namespace std;

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

const int MOD = 1e9 + 7;
const vector<ii> dir {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
const vector<ii> dir8 {{0, 1}, {1, 0}, {-1, 0}, {0, -1}, {1, 1}, {-1, -1}, {1, -1}, {-1, 1}};

string parse(string& st, string delimiter) {
    int pos = st.find(delimiter);
    if (pos == -1) {
        string temp = st;
        st = "";
        return temp;
    } else {
        string temp = st.substr(0, pos);
        st = st.substr(pos + delimiter.size());
        return temp;
    }
}

struct compare {
    bool operator() (const vector<int>& a, const vector<int>& b) {
        return a[0] > b[0];
    }
};

void part1(vector<vector<int>>& board) {
    cout << "Part 1: " << endl;

    int n = board.size(), m = board[0].size();

    // Dijkstra's algorithm
    vector<vector<int>> dist(n, vector<int> (m, INT_MAX));
    priority_queue<vector<int>, vector<vector<int>>, compare> pq;

    pq.push({0, 0, 0});
    dist[0][0] = 0;

    while (!pq.empty()) {
        int curr_dist = pq.top()[0];
        int i = pq.top()[1], j = pq.top()[2];
        pq.pop();

        for (auto& [x, y]: dir) {
            if (i + x >= 0 && i + x < n && j + y >= 0 && j + y < m) {
                if (dist[i+x][j+y] > curr_dist + board[i+x][j+y]) {
                    dist[i+x][j+y] = curr_dist + board[i+x][j+y];
                    pq.push({dist[i+x][j+y], i+x, j+y});
                }
            }
        }
    }

    cout << dist[n-1][m-1] << endl;

}

void part2(vector<vector<int>>& board) {
    cout << "Part 2: " << endl;
    
    int n = board.size(), m = board[0].size();

    // Expand to the right
    for (int i = 0; i < n; i++) {
        for (int k = 1; k <= 4; k++) {
            for (int j = 0; j < m; j++) {
                board[i].push_back(board[i][j] + k);
                if (board[i][board[i].size()-1] > 9) {
                    board[i][board[i].size()-1] -= 9;
                }
            }
        }
    }
    m *= 5;

    // Expand downwards
    for (int k = 1; k <= 4; k++) {
        for (int i = 0; i < n; i++) {
            vector<int> temp(m);
            for (int j = 0; j < m; j++) {
                temp[j] = board[i][j] + k;
                if (temp[j] > 9) {
                    temp[j] -= 9;
                }
            }
            board.push_back(temp);
        }
    }
    n *= 5;
    
    // Dijkstra's algorithm
    vector<vector<int>> dist(n, vector<int> (m, INT_MAX));
    priority_queue<vector<int>, vector<vector<int>>, compare> pq;

    pq.push({0, 0, 0});
    dist[0][0] = 0;

    while (!pq.empty()) {
        int curr_dist = pq.top()[0];
        int i = pq.top()[1], j = pq.top()[2];
        pq.pop();

        for (auto& [x, y]: dir) {
            if (i + x >= 0 && i + x < n && j + y >= 0 && j + y < m) {
                if (dist[i+x][j+y] > curr_dist + board[i+x][j+y]) {
                    dist[i+x][j+y] = curr_dist + board[i+x][j+y];
                    pq.push({dist[i+x][j+y], i+x, j+y});
                }
            }
        }
    }

    cout << dist[n-1][m-1] << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;

    string st;
    vector<vector<int>> board;

    // Read input
    while (getline(cin, st)) {
        vector<int> line;
        for (char& c: st) line.push_back(c - '0');

        board.push_back(line);
    }

    // Start Solving
    while (t--) {
        part1(board);
        cout << endl;
        part2(board);
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
