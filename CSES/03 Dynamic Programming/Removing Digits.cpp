/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: A.cpp
 * time: Fri Feb 19 14:35:40 2021
 */
 
#include <bits/stdc++.h>
using namespace std;
 
/* ===== BEGIN USER CODE ===== */
 
#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"
 
// dp[n] = the smallest number of step require to reduce n to 0
// dp[n] = min(dp[n], dp[n - ith digit]) for every digit of n

vector<int> dp(1000001, 0);

// top-down approach
int top_down(int n) {
    if (n < 0) {
        return -1;
    } else if (n == 0) {
        return 0;
    }
 
    if (dp[n]) {
        return dp[n];
    }
 
    int min_step = INT_MAX;
    int temp = n;
    while (temp > 0) {
        int digit = temp % 10;
        if (digit != 0) {
            int val = top_down(n - digit);
            if (val != -1) {
                min_step = min(min_step, val);
            }
        }
        temp /= 10;
    }
 
    dp[n] = (min_step == INT_MAX ? -1: min_step + 1);
    return dp[n];
}

// bottom-up approach
int bottom_up(int n) {
    for (int i = 1; i <= n; i++) {
        int temp = i;
        dp[i] = INT_MAX;
        while (temp > 0) {
            int digit = temp % 10;
            if (digit != 0) {
                dp[i] = min(dp[i], dp[i - digit] + 1);
            }
            temp /= 10;
        }
    }
    return dp[n];
}
 
void solve() {
    int n;
    cin >> n;

    // top_down(n);
    // bottom_up(n);

    cout << dp[n] << endl;
}
 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());
 
    int t = 1;
    //cin >> t;
    
    while (t--) {
        solve();
    }
 
    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}