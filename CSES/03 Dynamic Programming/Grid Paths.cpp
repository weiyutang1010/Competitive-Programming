/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: A.cpp
 * time: Fri Feb 19 14:35:40 2021
 */
 
#include <bits/stdc++.h>
using namespace std;
 
/* ===== BEGIN USER CODE ===== */
 
#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

// dp[i][j] = total number of ways to reach room[i][j] suppose room[i][j] is not a trap
// dp[i][j] = dp[i][j-1] + dp[i-1][j] if there exists a room the the left and right such that they are not a trap
 
void solve() {
    const int MOD = 1e9 + 7;
    int n;
    cin >> n;
    vector<string> v(n);
    for (string& x: v) cin >> x;
 
    vector<vector<int>> dp(n, vector<int> (n, 0));
    if (v[0][0] == '.') dp[0][0] = 1;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (v[i][j] == '.') {
                if (i > 0 && v[i-1][j] =='.') {
                    dp[i][j] += dp[i-1][j] % MOD;
                }
                if (j > 0 && v[i][j-1] == '.') {
                    dp[i][j] += dp[i][j-1] % MOD;
                }
            }
        }
    }
 
    cout << dp[n-1][n-1] % MOD << endl;
}
 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());
 
    int t = 1;
    //cin >> t;
    
    while (t--) {
        solve();
    }
 
    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}