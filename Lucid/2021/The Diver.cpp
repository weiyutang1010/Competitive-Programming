/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: A.cpp
 * time: Fri Feb 19 14:35:40 2021
 */

#include <bits/stdc++.h>
using namespace std;

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

const int MOD = 1e9 + 7;
const vector<ii> dir {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};

struct point {
    int x;
    int y;
    int dist;
};

void solve() {
    int n, m;
    cin >> n >> m;

    vector<vector<int>> graph (n, vector<int> (m));
    vector<ii> zeros;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> graph[i][j];
            if (graph[i][j] == 0) zeros.push_back({i, j});
        }
    }

    for (auto& [i,j]: zeros) {
        queue<struct point> Q;
        struct point zero = {i,j,0};
        Q.push(zero);

        while (!Q.empty()) {
            struct point curr = Q.front();
            Q.pop();

            for (auto& [x, y]: dir) {
                if (curr.x + x < n && curr.x + x >= 0 && curr.y + y < m && curr.y + y >= 0) {
                    if (graph[curr.x+x][curr.y+y] > 0 && curr.dist + 1 < graph[curr.x+x][curr.y+y]) {
                        graph[curr.x+x][curr.y+y] = curr.dist + 1;
                        Q.push({curr.x+x,curr.y+y,curr.dist+1});
                    }
                }
            }
        }
    }

    for (auto& x: graph) {
        for (auto& y: x) cout << y << " ";
        cout << endl;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;
    //cin >> t;
    
    while (t--) {
        solve();
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}

