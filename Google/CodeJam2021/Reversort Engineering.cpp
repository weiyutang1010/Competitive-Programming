/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: A.cpp
 * time: Fri Feb 19 14:35:40 2021
 */

#include <bits/stdc++.h>
using namespace std;

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

int calc_cost(vector<int> v, int n) {
    int cost = 0;
    for (int i = 0; i < n - 1; i++) {
        int j = min_element(v.begin() + i, v.end()) - v.begin();
        cost += j - i + 1;
        reverse(v.begin() + i, v.begin() + j + 1);
    }

    return cost;
}

bool generate_p(vector<int> p, map<int, int> unused, int i, int n, int target) {
    if (i == n) {
        if (calc_cost(p, n) == target) {
            for (int& x: p) {
                cout << x << " ";
            }
            cout << endl;
            return true;
        }
        return false;
    }

    for (auto& [x, y]: unused) {
        if (y > 0) {
            p[i] = x;
            unused[x] = 0;
            if (generate_p(p, unused, i + 1, n, target)) return true;
            unused[x] = 1;
            p[i] = 0;
        }
    }
    return false;
}

// Only passed 1st test case
int solve() {
    int n, c;
    cin >> n >> c;

    vector<int> p(n);
    map<int, int> mp;
    for (int j = 1; j <= n; j++) mp[j] = 1;
    if (!generate_p(p, mp, 0, n, c)) cout << "IMPOSSIBLE" << endl;

    return 0;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;
    cin >> t;
    
    int i = 1;
    while (t--) {
        cout << "Case #" << i++ << ": ";
        solve();
        // cout << solve() << endl;
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
