/*
 * generated by github.com/calgagi/cp_gen
 * author: weiyutang
 * file: A.cpp
 * time: Fri Mar 12 21:58:43 2021
 */

#include <bits/stdc++.h>
using namespace std;
const string CP_GEN_FILE = "A";

namespace cp {

}

/* ===== BEGIN USER CODE ===== */

#define ll long long
#define ld long double
#define ii pair<int, int>
#define f first
#define s second
#define endl "\n"

vector<ii> dir = {{0,1}, {1,0}, {-1,0}, {0,-1}};

int64_t solve() {
    int rows, cols;
    cin >> rows >> cols;
    vector<vector<int>> grid(rows, vector<int> (cols));
    priority_queue<array<int, 3>> pq; // {value, i, j}
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> grid[i][j];
            pq.push({grid[i][j], i, j});
        }
    }

    int64_t ans = 0;

    // Check if index is in bound
    auto valid = [&] (int i, int j) -> bool {
        return i >= 0 && i < rows && j >= 0 && j < cols;  
    };

    // Check if the height is valid, if not return how many boxes to add
    auto less_than = [&] (int i, int j, int val) -> int {
        if (grid[i][j] < val - 1)
            return (val - 1) - grid[i][j];
        return 0;
    };
    
    vector<vector<int>> visited(rows, vector<int> (cols, 0));

    while (!pq.empty()) {
        int height = pq.top()[0]; // same as height in grid[i][j]
        int i = pq.top()[1];
        int j = pq.top()[2];
        pq.pop();

        if (!visited[i][j]) {
            ans += height - grid[i][j];
            for (auto& [x, y]: dir) {
                if (valid(i + x, j + y)) {
                    // Add box to surrounding boxes
                    int added_box = less_than(i + x, j + y, height);
                    if (added_box > 0) {
                        pq.push({height - 1, i + x, j + y});
                    }
                }
            }
            visited[i][j] = 1;
        }
    }

    return ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int t = 1;
    cin >> t;
    
    int i = 1;
    while (t--) {
        cout << "Case #" << i++ << ": ";
        cout << solve() << endl;
    }

    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl; 
    return 0;
}
